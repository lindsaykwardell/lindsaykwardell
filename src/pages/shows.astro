---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getShows } from "@/api/shows"
import type { Show } from '@/api/shows'

const type = Astro.url.searchParams.get("type");

const showsByYear = (
    await getShows())
        .filter(show => !type || show.type === type)
        .reduce((byYear, show) => {
            const year = new Date(show.pubDate).getFullYear();

            if (!byYear[year]) {
                byYear[year] = [];
            }

            byYear[year].push(show)

            return byYear;
        }, {} as {[key: string]: Show[]})
---
<BaseLayout>
    {type && (
        <div class="flex justify-end text-stone-400">
            <a href="/shows">‚Üê All content</a>
        </div>
    )}
    <ul class="pb-7">
        {Object.entries(showsByYear).toSorted((a,b) => +b[0] - +a[0]).map(([year, shows]) => (
            <li class="font-title text-2xl text-stone-400 py-8 pl-8">{year}</li>
            <ul class="flex flex-col gap-7 lg:gap-2 px-2 md:px-0">
                {shows.map(show => (
                    <li class="text-lg md:text-xl grid grid-cols-2 lg:grid-cols-8 gap-2 lg:gap-7 items-center">
                        <a transition:name={show.id} href={`/shows/${show.id}`} class="col-span-2 lg:col-span-6 hover:underline">{show.title}</a>
                        <time class="text-sm text-stone-400">{Intl.DateTimeFormat('en-us').format(new Date(show.pubDate))}</time>
                        <a href={`/shows?type=${show.type}`} class="flex justify-end">
                            <span class={`rounded-lg lg:w-full ${show.type === 'podcast' ? 'bg-purple-950' : show.type === 'video' ? 'bg-red-950' : show.type === 'conference' ? 'bg-blue-950' : 'bg-stone-800'} text-stone-400 text-sm px-2 py-1`}>{show.type}</span>
                        </a>
                    </li>
                ))}
            </ul>
        ))}
    </ul>
</BaseLayout>